// üîí REGLAS DE SEGURIDAD FIRESTORE
// ==================================

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // üë§ USUARIOS - Solo el propietario puede leer/escribir su perfil
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Subcollecciones del usuario
      match /settings/{document} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /stats/{document} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // üõí INVENTARIOS - Solo el propietario puede acceder a su inventario
    match /inventories/{userId}/items/{itemId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Validaci√≥n de datos
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && isValidInventoryItem(request.resource.data);
        
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && isValidInventoryItem(request.resource.data);
    }
    
    // üõçÔ∏è COMPRAS - Solo el propietario puede acceder a su historial
    match /purchases/{userId}/history/{purchaseId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // üç≥ RECETAS - P√∫blicas para lectura, solo el autor puede modificar
    match /recipes/{recipeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null 
        && resource.data.createdBy == request.auth.uid;
      allow delete: if request.auth != null 
        && resource.data.createdBy == request.auth.uid;
    }
    
    // üìÇ CATEGOR√çAS - Lectura p√∫blica, solo admins pueden modificar las default
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null 
        && (!resource.data.isDefault || isAdmin());
      allow delete: if request.auth != null 
        && (!resource.data.isDefault || isAdmin());
    }
    
    // üîî NOTIFICACIONES - Solo el propietario puede acceder
    match /notifications/{userId}/messages/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // üìã LISTA DE COMPRAS - Solo el propietario puede acceder
    match /shopping_lists/{userId}/items/{itemId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // üìä ESTAD√çSTICAS GLOBALES - Solo lectura para usuarios autenticados
    match /global_stats/{document} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // üîß FUNCIONES DE VALIDACI√ìN
    function isValidInventoryItem(data) {
      return data.keys().hasAll(['name', 'category', 'quantity', 'unit', 'purchaseDate', 'expirationDate'])
        && data.name is string && data.name.size() > 0
        && data.category is string && data.category.size() > 0
        && data.quantity is number && data.quantity >= 0
        && data.unit is string && data.unit.size() > 0
        && data.purchaseDate is timestamp
        && data.expirationDate is timestamp
        && data.expirationDate > data.purchaseDate;
    }
    
    function isAdmin() {
      // Por ahora, solo el creador del proyecto es admin
      return request.auth != null && request.auth.uid == "YOUR_ADMIN_UID_HERE";
    }
    
    // Funci√≥n para verificar si el usuario puede acceder a un hogar compartido
    function canAccessHousehold(userId) {
      return request.auth != null 
        && (request.auth.uid == userId 
            || exists(/databases/$(database)/documents/users/$(request.auth.uid)/profile)
            && get(/databases/$(database)/documents/users/$(request.auth.uid)/profile).data.members.hasAny([userId]));
    }
  }
}

// üìù NOTAS SOBRE SEGURIDAD:
//
// 1. Todos los datos requieren autenticaci√≥n
// 2. Los usuarios solo pueden acceder a sus propios datos
// 3. Las recetas son p√∫blicas para lectura pero privadas para escritura
// 4. Las categor√≠as por defecto est√°n protegidas
// 5. Validaci√≥n de datos en el servidor
// 6. Preparado para funcionalidad multi-usuario (hogares compartidos)
//
// üöÄ PARA IMPLEMENTAR EN FIREBASE CONSOLE:
// 1. Ve a Firestore Database
// 2. Clic en "Rules"
// 3. Reemplaza las reglas por defecto con este c√≥digo
// 4. Actualiza YOUR_ADMIN_UID_HERE con tu UID real
// 5. Clic en "Publish"